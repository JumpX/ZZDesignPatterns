<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<array>
	<dict>
		<key>name</key>
		<string>工厂方法模式</string>
		<key>enName</key>
		<string>Factory Method Pattern</string>
		<key>type</key>
		<string>创建型</string>
		<key>demo</key>
		<string>ZZFactoryMethodPattern</string>
		<key>description</key>
		<string>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例延迟到其子类</string>
	</dict>
	<dict>
		<key>name</key>
		<string>抽象工厂模式</string>
		<key>enName</key>
		<string>Abstract Factory Pattern</string>
		<key>type</key>
		<string>创建型</string>
		<key>demo</key>
		<string>ZZAbstractFactoryPattern</string>
		<key>description</key>
		<string>提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类</string>
	</dict>
	<dict>
		<key>name</key>
		<string>建造者模式</string>
		<key>enName</key>
		<string>Builder Pattern</string>
		<key>type</key>
		<string>创建型</string>
		<key>demo</key>
		<string>ZZBuilderPattern</string>
		<key>description</key>
		<string>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</string>
	</dict>
	<dict>
		<key>name</key>
		<string>原型模式</string>
		<key>enName</key>
		<string>Prototype Pattern</string>
		<key>type</key>
		<string>创建型</string>
		<key>demo</key>
		<string>ZZPrototypePattern</string>
		<key>description</key>
		<string>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象</string>
	</dict>
	<dict>
		<key>name</key>
		<string>单例模式</string>
		<key>enName</key>
		<string>Singleton Pattern</string>
		<key>type</key>
		<string>创建型</string>
		<key>demo</key>
		<string>ZZSingletonPattern</string>
		<key>description</key>
		<string>保证一个类仅有一个实例，并提供一个访问它的全局访问点</string>
	</dict>
	<dict>
		<key>name</key>
		<string>适配器模式</string>
		<key>enName</key>
		<string>Adapter Pattern</string>
		<key>type</key>
		<string>结构型</string>
		<key>demo</key>
		<string>ZZAdapterPattern</string>
		<key>description</key>
		<string>将一个类的接口转换成客户希望的另外一个接口。使得原来由于接口不兼容而不能一起工作的那些类可以一起工作</string>
	</dict>
	<dict>
		<key>name</key>
		<string>桥接模式</string>
		<key>enName</key>
		<string>Bridge Pattern</string>
		<key>type</key>
		<string>结构型</string>
		<key>demo</key>
		<string>ZZBridgePattern</string>
		<key>description</key>
		<string>将抽象部分与它的实现部分分离，使它们都可以独立的变化</string>
	</dict>
	<dict>
		<key>name</key>
		<string>组合模式</string>
		<key>enName</key>
		<string>Composite Pattern</string>
		<key>type</key>
		<string>结构型</string>
		<key>demo</key>
		<string>ZZCompositePattern</string>
		<key>description</key>
		<string>将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性</string>
	</dict>
	<dict>
		<key>name</key>
		<string>装饰模式</string>
		<key>enName</key>
		<string>Decorator Pattern</string>
		<key>type</key>
		<string>结构型</string>
		<key>demo</key>
		<string>ZZDecoratorPattern</string>
		<key>description</key>
		<string>动态的给一个对象添加一些额外额职责，就增加功能而言，装饰模式比生成子类更为灵活</string>
	</dict>
	<dict>
		<key>name</key>
		<string>外观模式</string>
		<key>enName</key>
		<string>Facade Pattern</string>
		<key>type</key>
		<string>结构型</string>
		<key>demo</key>
		<string>ZZFacadePatterm</string>
		<key>description</key>
		<string>为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统更加容易使用</string>
	</dict>
	<dict>
		<key>name</key>
		<string>享元模式</string>
		<key>enName</key>
		<string>Flyweight Pattern</string>
		<key>type</key>
		<string>结构型</string>
		<key>demo</key>
		<string>ZZFlyweightPattern</string>
		<key>description</key>
		<string>运用共享技术有效地支持大量细粒度的对象</string>
	</dict>
	<dict>
		<key>name</key>
		<string>代理模式</string>
		<key>enName</key>
		<string>Proxy pattern</string>
		<key>type</key>
		<string>结构型</string>
		<key>demo</key>
		<string>ZZProxyPattern</string>
		<key>description</key>
		<string>为其他对象提供一种代理以控制对这个对象的访问</string>
	</dict>
	<dict>
		<key>name</key>
		<string>责任链模式</string>
		<key>enName</key>
		<string>Chain of Responsibility Pattern</string>
		<key>type</key>
		<string>行为型</string>
		<key>demo</key>
		<string>ZZChainOfResponsibilityPattern</string>
		<key>description</key>
		<string>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止</string>
	</dict>
	<dict>
		<key>name</key>
		<string>命令模式</string>
		<key>enName</key>
		<string>Command Pattern</string>
		<key>type</key>
		<string>行为型</string>
		<key>demo</key>
		<string>ZZCommandPattern</string>
		<key>description</key>
		<string>将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或记录请求日志，以及支持可撤销的操作</string>
	</dict>
	<dict>
		<key>name</key>
		<string>解释器模式</string>
		<key>enName</key>
		<string>Interpreter Pattern</string>
		<key>type</key>
		<string>行为型</string>
		<key>demo</key>
		<string>ZZInterpreterPattern</string>
		<key>description</key>
		<string>给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子</string>
	</dict>
	<dict>
		<key>name</key>
		<string>迭代器模式</string>
		<key>enName</key>
		<string>Iterator Pattern</string>
		<key>type</key>
		<string>行为型</string>
		<key>demo</key>
		<string>ZZIteratorPattern</string>
		<key>description</key>
		<string>提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示</string>
	</dict>
	<dict>
		<key>name</key>
		<string>中介者模式</string>
		<key>enName</key>
		<string>Mediator Pattern</string>
		<key>type</key>
		<string>行为型</string>
		<key>demo</key>
		<string>ZZMediatorPattern</string>
		<key>description</key>
		<string>用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示的相互引用，从而使其耦合松散，而且可以独立的改变它们之间的交互</string>
	</dict>
	<dict>
		<key>name</key>
		<string>备忘录模式</string>
		<key>enName</key>
		<string>Memento Pattern</string>
		<key>type</key>
		<string>行为型</string>
		<key>demo</key>
		<string>ZZMementoPattern</string>
		<key>description</key>
		<string>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态</string>
	</dict>
	<dict>
		<key>name</key>
		<string>观察者模式</string>
		<key>enName</key>
		<string>Observer Pattern</string>
		<key>type</key>
		<string>行为型</string>
		<key>demo</key>
		<string>ZZObserverPattern</string>
		<key>description</key>
		<string>定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态发生变化时，会通过所有观察者对象，使它们能够自动更新自己</string>
	</dict>
	<dict>
		<key>name</key>
		<string>状态模式</string>
		<key>enName</key>
		<string>State Pattern</string>
		<key>type</key>
		<string>行为型</string>
		<key>demo</key>
		<string>ZZStatePattern</string>
		<key>description</key>
		<string>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类</string>
	</dict>
	<dict>
		<key>name</key>
		<string>策略模式</string>
		<key>enName</key>
		<string>Strategy Pattern</string>
		<key>type</key>
		<string>行为型</string>
		<key>demo</key>
		<string>ZZStrategyPattern</string>
		<key>description</key>
		<string>它定义了算法家族，分别封装起来，让它们之间可以互相替换，此模式让算法的变化，不会影响到使用算法的客户</string>
	</dict>
	<dict>
		<key>name</key>
		<string>模板方法模式</string>
		<key>enName</key>
		<string>Template Method Pattern</string>
		<key>type</key>
		<string>行为型</string>
		<key>demo</key>
		<string>ZZTemplateMethodPattern</string>
		<key>description</key>
		<string>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤</string>
	</dict>
	<dict>
		<key>name</key>
		<string>访问者模式</string>
		<key>enName</key>
		<string>Visitor Pattern</string>
		<key>type</key>
		<string>行为型</string>
		<key>demo</key>
		<string>ZZVisitorPattern</string>
		<key>description</key>
		<string>表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作</string>
	</dict>
</array>
</plist>
